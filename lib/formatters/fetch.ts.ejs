const fetch = require('node-fetch')
const pick = (obj:any, keys:string[]) => keys.reduce((picked, key) => obj[key] !== undefined ? Object.assign(picked, {[key]: obj[key]}) : picked, {})
const substitutePath = (pathName:string, body:any) => pathName.split('/').map(dir => dir.startsWith('{') ? body[dir.slice(1,-1)] : dir).join('/')
const encodeQuery = (obj:any, keys:string[]) => require('querystring').encode(pick(obj, keys))
const API_URL = <%= server %>

<% for (let operation of eachOperation(schema.paths)) { %>
  export type <%- operation.name %> = (payload: <%- operation.requestType %>) => Promise<<%- operation.responseType %>>
  const <%- operation.name %> = (body: <%- operation.requestType %>, options: any):Promise<<%- operation.responseType %>> => {
  <% 
    let endpointURL = operation.hasAnyParametersIn('path') ?
      `API_URL + substitutePath(${JSON.stringify(operation.pathName)}, body)` :
      'API_URL'
  %>
  return fetch(<%-
    operation.hasAnyParametersIn('query') ?
      `[${endpointURL}, encodeQuery(body, ${JSON.stringify(operation.parameterNamesIn('query'))})].filter(x=>x).join('?')` :
      endpointURL
  %>, {
      ...options,
      method: <%= operation.method %>,
      <%- operation.operationObject.requestBody ? 'body: JSON.stringify(body),' : '' %>
    }).then((res:any) => res.json())  
  }
<% } %>